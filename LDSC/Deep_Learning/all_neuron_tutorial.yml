---
ops: [train, evaluate]
model: {
    path: /mnt/mfs/statgen/Anmol/training_files/deeperdeepsea.py,#UPDATE
    class: DeeperDeepSEA,
    class_args: {
        sequence_length: 1000,
        n_targets: 7,
    },
    non_strand_specific: mean
}
sampler: !obj:selene_sdk.samplers.IntervalsSampler {
    reference_sequence: !obj:selene_sdk.sequences.Genome {
        input_path: /mnt/mfs/statgen/Anmol/training_files/male.hg19.fasta,#UPDATE
        blacklist_regions: hg19
    },
    features: !obj:selene_sdk.utils.load_features_list {
        input_path: /mnt/mfs/statgen/Anmol/training_files/tutorial/tutorial_features.txt #UPDATE
    },
    target_path: /mnt/mfs/statgen/Anmol/training_files/tutorial/tutorial.bed.gz, #UPDATE
    intervals_path: /mnt/mfs/statgen/Anmol/training_files/DNase_Intervals_FULL.txt, #UPDATE
    seed: 127,
    # A positive example is an 1000bp sequence with at least 1 class/feature annotated to it.
    # A negative sample has no classes/features annotated to the sequence.
    sample_negative: True,
    sequence_length: 1000,
    center_bin_to_predict: 200,
    test_holdout: 0.2,
    validation_holdout: 0.3,
    # The feature must take up 50% of the bin (200bp) for it to be considered
    # a feature annotated to that sequence.
    feature_thresholds: 0.25,
    mode: train,
    save_datasets: [validate, test]
}
train_model: !obj:selene_sdk.TrainModel {
    batch_size: 64,
    max_steps: 500,  # update this value for longer training
    report_stats_every_n_steps: 250,
    n_validation_samples: 25000,
    n_test_samples: 125000,
    cpu_n_threads: 32,
    use_cuda: False,  # TODO: update this if CUDA is not on your machine
    data_parallel: False
}
random_seed: 1447
output_dir: ./tutorial/training_outputs/model #UPDATE
create_subdirectory: False
load_test_set: False
...